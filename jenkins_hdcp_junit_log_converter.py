#!/usr/bin/env python

import argparse
import os
import string
import xml.etree.cElementTree as etree
import re


class TesCase:
    error_pattern = re.compile('(!!!! TST_Error - .*)')

    def __init__(self, match_tuple):
        self.name = match_tuple[0]
        # filter non printable characters as they are not allowed by XML syntax
        self.system_out = filter(lambda x: x in string.printable, match_tuple[1])
        self.status = match_tuple[2]
        self.time = float(match_tuple[3])/1000

    def find_first_failure(self):
        error_lines = re.findall(TesCase.error_pattern, self.system_out)
        return '\n'.join(error_lines)


def get_parser():
    parser = argparse.ArgumentParser(description='HDCP JUNIT Log converter')

    parser.add_argument(
        'log_file',
        type=argparse.FileType('rt'),
        metavar='LOG_FILE',
        help='HDCP textual log file to be converted to JUNIT format',
    )
    parser.add_argument(
        '-o',
        '--output-file',
        type=argparse.FileType('wb'),
        metavar='FILE',
        help='output file name. if omitted - input file name will be but with xml extension instead'
    )
    parser.add_argument(
        '-t',
        '--test-suite',
        metavar='NAME',
        help='test suite name to be used in JUNIT report. If omitted will be derived from input log file name'
    )
    parser.add_argument(
        '-v',
        '--validate',
        action='store_true',
        help='validate generated XML against Jenkins XSD. Requires "requests" and "lxml" libraries ')

    return parser


def convert_hdcp_log_to_junit(log_file, test_suite):
    with log_file as fh:
        test_log = fh.read()
    pattern = re.compile(
        r'\*\*\*\*\*\*\*\* Test (.*?) \*\*\*\*\*\*\*\*(.*?)\*\*\*\*\*\*\*\* Test .*? \((PASSED|FAILED)\) Duration: (\d+)ms \*\*\*\*\*\*\*\*',
        re.DOTALL
    )
    test_case_matches = re.findall(pattern, test_log)

    if not test_case_matches:
        raise Exception('Malformed log file - no tests were found')

    total_time = 0
    num_of_failures = 0

    test_suite_root_element = etree.Element(
        'testsuite',
        tests=str(len(test_case_matches)),
        name=test_suite
    )

    for single_test_case_match in test_case_matches:
        test_case = TesCase(single_test_case_match)
        total_time += test_case.time

        test_case_element = etree.SubElement(
            test_suite_root_element, 'testcase', time=str(test_case.time), name=test_case.name)
        etree.SubElement(test_case_element, 'system-out').text = test_case.system_out

        if test_case.status != 'PASSED':
            num_of_failures += 1
            failure_msg = test_case.find_first_failure()
            etree.SubElement(test_case_element, 'failure', message=failure_msg)
    test_suite_root_element.set('failures', str(num_of_failures))
    # TODO consider finding a way for counting skipped AKA disabled tests
    #test_suite_root_element.set('skipped', '0')
    test_suite_root_element.set('time', str(total_time))

    return etree.ElementTree(test_suite_root_element)


def do_convert():
    args = get_parser().parse_args()

    if not args.output_file:
        args.output_file = open(os.path.splitext(args.log_file.name)[0] + '_junit.xml', 'wb')

    if not args.test_suite:
        # example of args.log_file.name variable format: /myroot/Scripts/HDCP_Logs_TX_Linux_RX_Qualcomm/Logs_bb_transmitter2.0_bb_sink2.2_Release/bb_transmitter.txt
        log_dir = os.path.dirname(os.path.abspath(args.log_file.name))
        # example of log_dir variable format: /myroot/Scripts/HDCP_Logs_TX_Linux_RX_Qualcomm/Logs_bb_transmitter2.0_bb_sink2.2_Release
        suffix = os.path.basename(log_dir).replace('Logs_', '').replace('.','_')
        # example of suffix variable format: bb_transmitter2_0_bb_sink2_2_Release
        prefix = os.path.split(os.path.split(log_dir)[0])[1]   # 1st split call returns parent folder name of 
        # example of prefix variable format: HDCP_Logs_TX_Linux_RX_Qualcomm
        args.test_suite = prefix.replace('HDCP_Logs_', '') + '.' + suffix

    junit_xml = convert_hdcp_log_to_junit(
        log_file=args.log_file,
        test_suite=args.test_suite
    )
    with args.output_file as fh:  # insure File Object is closed - since it will be read in do_validate()
        junit_xml.write(fh)

    if args.validate:
        do_validate(args.output_file.name)


def do_validate(output_file):
    """
    useful when developing/maintaining the script
    perform XSD validation against Jenkins Junit plugin schema file
    :param output_file: output file generated by the script
    """
    import lxml.etree
    import requests

    jenkins_junit_xsd = 'https://raw.githubusercontent.com/jenkinsci/xunit-plugin/master/src/main/resources/org/jenkinsci/plugins/xunit/types/model/xsd/junit-10.xsd'
    response = requests.get(jenkins_junit_xsd)
    response.raise_for_status()

    xmlschema_doc = lxml.etree.fromstring(response.content)
    xmlschema = lxml.etree.XMLSchema(xmlschema_doc)

    xml_doc = lxml.etree.parse(output_file)
    xmlschema.assertValid(xml_doc)


if __name__ == '__main__':
    do_convert()